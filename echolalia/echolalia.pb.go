// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echolalia.proto

/*
Package echolalia is a generated protocol buffer package.

It is generated from these files:
	echolalia.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package echolalia

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echolalia service

type EcholaliaClient interface {
	Echo(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Palindrome(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type echolaliaClient struct {
	cc *grpc.ClientConn
}

func NewEcholaliaClient(cc *grpc.ClientConn) EcholaliaClient {
	return &echolaliaClient{cc}
}

func (c *echolaliaClient) Echo(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/Echolalia/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echolaliaClient) Palindrome(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/Echolalia/Palindrome", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Echolalia service

type EcholaliaServer interface {
	Echo(context.Context, *HelloRequest) (*HelloReply, error)
	Palindrome(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterEcholaliaServer(s *grpc.Server, srv EcholaliaServer) {
	s.RegisterService(&_Echolalia_serviceDesc, srv)
}

func _Echolalia_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcholaliaServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Echolalia/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcholaliaServer).Echo(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echolalia_Palindrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcholaliaServer).Palindrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Echolalia/Palindrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcholaliaServer).Palindrome(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echolalia_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Echolalia",
	HandlerType: (*EcholaliaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echolalia_Echo_Handler,
		},
		{
			MethodName: "Palindrome",
			Handler:    _Echolalia_Palindrome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echolalia.proto",
}

func init() { proto.RegisterFile("echolalia.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4d, 0xce, 0xc8,
	0xcf, 0x49, 0xcc, 0xc9, 0x4c, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe2, 0xe2, 0xf1,
	0x48, 0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd4, 0xb8, 0xb8,
	0xa0, 0x6a, 0x0a, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61,
	0x8a, 0x60, 0x5c, 0xa3, 0x48, 0x2e, 0x4e, 0x57, 0x98, 0xf1, 0x42, 0x4a, 0x5c, 0x2c, 0x20, 0x8e,
	0x10, 0xaf, 0x1e, 0xb2, 0xf9, 0x52, 0xdc, 0x7a, 0x48, 0x46, 0x69, 0x70, 0x71, 0x05, 0x24, 0xe6,
	0x64, 0xe6, 0xa5, 0x14, 0xe5, 0xe7, 0xa6, 0xe2, 0x53, 0x99, 0xc4, 0x06, 0x76, 0xad, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xa2, 0xc6, 0xdf, 0x4d, 0xc0, 0x00, 0x00, 0x00,
}
